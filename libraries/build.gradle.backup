//import com.google.gson.*
//import com.google.gson.JsonParser
//import groovy.json.*
//import groovy.util.*
//import org.gradle.api.internal.tasks.testing.*
//import org.gradle.api.tasks.testing.logging.*
//import org.gradle.jvm.tasks.Jar
//import org.gradle.plugins.signing.signatory.internal.pgp.*
//import org.jetbrains.kotlin.gradle.dsl.*
//import org.jetbrains.kotlin.gradle.plugin.*
//import org.jetbrains.kotlin.gradle.targets.js.ir.*
//import java.net.*
//import java.util.*
//import java.util.concurrent.*
//
//plugins {
//    kotlin("multiplatform") version "2.0.0"
//    id("com.android.library") version "8.2.0"
//    `maven-publish`
//    signing
//}
//
//var VERSION: String = "999.0.0.999"
//val JVM_TARGET = JvmTarget.JVM_1_8
//val GROUP: String = "com.soywiz"
//
//kotlin {
//    jvm()
//    androidTarget()
//}
//
//allprojects {
//    repositories {
//        mavenCentral()
//        google()
//        gradlePluginPortal()
//        //maven("https://maven.pkg.jetbrains.space/public/p/amper/amper")
//        //maven("https://www.jetbrains.com/intellij-repository/releases")
//        //maven("https://packages.jetbrains.team/maven/p/ij/intellij-dependencies")
//    }
//    version = VERSION
//    group = GROUP
//    project.apply(plugin = "kotlin-multiplatform")
//    project.apply(plugin = "android-library")
//    android {        
//        compileSdk = 33
//        namespace = "com.soywiz.${project.name.replace("-", ".")}"
//        defaultConfig {
//            minSdk = 20
//        }       
//    }
//    MicroAmper(this).configure()
//}
//
//fun Project.doOnce(uniqueName: String, block: () -> Unit) {
//    val key = "doOnce-$uniqueName"
//    if (!rootProject.extra.has(key)) {
//        rootProject.extra.set(key, true)
//        block()
//    }
//}
//
//subprojects {
//    apply(plugin = "kotlin-multiplatform")
//
//    kotlin {
//        js {
//            browser {
//                compilerOptions {
//                    target.set("es2015")
//                }
//            }
//        }
//    }
//
//    kotlin {
//        androidTarget {
//            compilerOptions.jvmTarget.set(JVM_TARGET)
//        }
//    }  
//
//    kotlin.targets.withType(KotlinJsIrTarget::class) {
//        browser {
//            testRuns.getByName(KotlinTargetWithTests.DEFAULT_TEST_RUN_NAME).executionTask.configure {
//                useKarma {
//                    useChromeHeadless()
//                    File(project.rootProject.rootDir, "karma.config.d").takeIf { it.exists() }?.let {
//                        useConfigDirectory(it)
//                    }
//                }
//            }
//        }
//    }
//
//    for (taskName in listOf("jsTestProcessResources", "wasmTestProcessResources")) {
//        tasks.findByName(taskName)?.apply {
//            this.dependsOn(tasks.create("${taskName}CopyResources", TestProcessResourcesLast::class).also {
//                it.dirs = this.outputs.files.toList().filter { it.isDirectory }
//            })
//        }
//    }
//
//    // This is required on linux because testResources / testresources mismatch (that doesn't happen on Windows or Mac)
//    // See https://github.com/korlibs/korge-korlibs/issues/6
//    tasks.withType(ProcessResources::class) {
//        if (this.name.contains("js", ignoreCase = true) || this.name.contains("wasm", ignoreCase = true)) {
//            if (this.name.contains("Test")) {
//                from("testresources")
//            }
//            from("resources")
//            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//        }
//    }
//
//}
//
//class MicroAmper(val project: Project) {
//    private var kotlinPlatforms = mutableListOf<String>()
//    private var kotlinAliases = LinkedHashMap<String, List<String>>()
//    private var deps = mutableListOf<Dep>()
//    val kotlinBasePlatforms by lazy { kotlinPlatforms.groupBy { getKotlinBasePlatform(it) } }
//
//    fun getKotlinBasePlatform(platform: String): String = platform.removeSuffix("X64").removeSuffix("X86").removeSuffix("Arm64").removeSuffix("Arm32").removeSuffix("Simulator").removeSuffix("Device").also {
//        check(it.all { it.isLowerCase() && !it.isDigit() })
//    }
//
//    data class Dep(val path: String, val exported: Boolean, val test: Boolean, val platform: String) {
//        val rplatform = platform.takeIf { it.isNotEmpty() } ?: "common"
//        val configuration = "$rplatform${if (test) "Test" else "Main"}${if (exported) "Api" else "Implementation"}"
//    }
//
//    fun parseFile(file: File, lines: List<String> = file.readLines()) {
//        var mode = ""
//
//        for (line in lines) {
//            val tline = line.substringBeforeLast('#').trim().takeIf { it.isNotEmpty() } ?: continue
//
//            if (line.startsWith(" ") || line.startsWith("\t") || line.startsWith("-")) {
//                when {
//                    mode == "product" -> {
//                        when {
//                            tline.startsWith("platforms:") -> {
//                                val platforms = tline.substringAfter('[').substringBeforeLast(']').split(',').map { it.trim() }
//                                kotlinPlatforms.addAll(platforms)
//                            }
//                        }
//                    }
//                    mode == "aliases" -> {
//                        if (tline.startsWith("-")) {
//                            val (alias2, platforms2) = tline.split(":", limit = 2)
//                            val alias = alias2.trim('-', ' ')
//                            val platforms = platforms2.trim('[', ']', ' ').split(',').map { it.trim() }
//                            kotlinAliases[alias] = platforms
//                        }
//                    }
//                    mode.contains("dependencies") -> {
//                        val platform = mode.substringAfterLast('@', "")
//                        val test = mode.startsWith("test")
//                        val exported = line.contains(Regex(":\\s*exported"))
//                        val path = tline.removePrefix("-").removeSuffix(": exported").removeSuffix(":exported").trim()
//                        deps += Dep(path = path, exported = exported, test = test, platform = platform)
//                    }
//                }
//            } else {
//                if (tline.endsWith(":")) {
//                    mode = tline.trimEnd(':').trim()
//                }
//                if (tline.startsWith("apply:")) {
//                    val paths = tline.substringAfter(':').trim('[', ',', ' ', ']').split(",")
//                    for (path in paths) {
//                        parseFile(file.parentFile.resolve(path))
//                    }
//                }
//            }
//        }
//    }
//
//    data class SourceSetPair(val main: KotlinSourceSet, val test: KotlinSourceSet) {
//        fun dependsOn(other: SourceSetPair) {
//            main.dependsOn(other.main)
//            test.dependsOn(other.test)
//        }
//    }
//
//    val sourceSetPairs = LinkedHashMap<String, SourceSetPair>()
//
//    fun NamedDomainObjectContainer<KotlinSourceSet>.ssDependsOn(base: String, other: String) {
//        if (base == other) return
//        ssPair(base).dependsOn(ssPair(other))
//    }
//
//    val projectFiles: Set<String> = (project.projectDir.list() ?: emptyArray()).toSet()
//
//    fun SourceDirectorySet.srcDirIfExists(path: String) {
//        setSrcDirs(listOf(path))
//    }
//
//    fun NamedDomainObjectContainer<KotlinSourceSet>.ssPair(name: String): SourceSetPair {
//        return sourceSetPairs.getOrPut(name) {
//            val atName = if (name == "common") "" else "@$name"
//            SourceSetPair(
//                main = maybeCreate("${name}Main").also {
//                    it.kotlin.srcDirIfExists("src$atName")
//                    it.resources.srcDirIfExists("resources$atName")
//                },
//                test = maybeCreate("${name}Test").also {
//                    it.kotlin.srcDirIfExists("test$atName")
//                    it.resources.srcDirIfExists("testResources$atName")
//                }
//            )
//        }
//    }
//
//    fun applyTo() = with(project) {
//        for (platform in kotlinPlatforms) {
//            when (platform) {
//                "jvm" -> kotlin.jvm {
//                    compilerOptions {
//                        this.jvmTarget.set(JVM_TARGET)
//                    }
//                }
//                "js" -> kotlin.js {
//                    browser()
//                }
//            }
//        }
//
//        kotlin.targets.forEach {
//            it.compilations.forEach {
//                it.compileTaskProvider.configure {
//                    compilerOptions {
//                        // apiVersion: Allow to use declarations only from the specified version of bundled libraries
//                        // languageVersion: Provide source compatibility with specified language version
//                        //this.apiVersion.set(KotlinVersion.KOTLIN_2_0)
//                        //this.languageVersion.set(KotlinVersion.KOTLIN_2_0)
//                    }
//                }
//            }
//        }
//
//        kotlin.sourceSets {
//            for ((alias, platforms) in (kotlinAliases + kotlinBasePlatforms)) {
//                ssDependsOn(alias, "common")
//                for (platform in platforms) ssDependsOn(platform, alias)
//            }
//        }
//
//        dependencies {
//            for (dep in deps) {
//                add(dep.configuration, when {
//                    dep.path.contains('/') -> project(":${File(dep.path).name}")
//                    dep.path.startsWith("\$") -> {
//                        when (dep.path) {
//                            "\$kotlin-test" -> "org.jetbrains.kotlin:kotlin-test"
//                            else -> TODO("Unknown ${dep.path}")
//                        }
//                    }
//                    else -> dep.path
//                })
//            }
//        }
//
//        for (target in kotlin.targets) {
//            target.compilations.all {
//                compileTaskProvider.configure {
//                    compilerOptions {
//                        suppressWarnings.set(true)
//                    }
//                }
//            }
//        }
//    }
//
//    fun configure() {
//        val amperFile = File(project.projectDir, "module.yaml").takeIf { it.exists() } ?: return
//        parseFile(amperFile)
//        applyTo()
//    }
//}
