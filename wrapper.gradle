import java.util.regex.Pattern

settings.ext.module = { String modulePath -> module(modulePath) }

settings.ext.plugin = { String pluginPath -> includeBuild(new File(currentDir, pluginPath)) }

/*internals*/

void module(String modulePath) {
    File artifactDir = new File(rootProject.projectDir, "$currentDir/$modulePath")
    if (!artifactDir.exists()) return
    File buildFile = new File(artifactDir, "build.gradle")
    if (!buildFile.exists()) return

    String currentArtifactId = null
    String firstArtifactId = null
    String artifactName = artifactDir.name
    BufferedReader reader = new BufferedReader(new FileReader(buildFile))
    String line
    while ((line = reader.readLine()) != null) {
        line = line.trim()
        if (line.isBlank()) continue

        Collection<Collection<String>> artifactMatches = artifactPattern.matcher(line).findAll()
        if (artifactMatches.size() != 0) {
            currentArtifactId = artifactMatches[0][1]
            if (firstArtifactId == null) firstArtifactId = currentArtifactId
            artifact(currentArtifactId, artifactDir)
        } else if (currentArtifactId != null) {
            Collection<Collection<String>> exampleMatches = examplePattern.matcher(line).findAll()
            if (exampleMatches.size() != 0) {
                String exampleName = exampleMatches[0][1]
                String exampleId = artifactName == "examples" ? "$exampleName-example" : "${currentArtifactId.replace("-examples", "").replace("-desktop", "")}-$exampleName-example"
                artifact(exampleId, artifactDir)
            }
        }
    }

    // include
    module("$modulePath/include/android")
    module("$modulePath/include/desktop")
    module("$modulePath/include/ios")
    module("$modulePath/include/js")
    module("$modulePath/include/jvm")
    module("$modulePath/include/editor")

    // assemble
    File assembleDir = new File(rootProject.projectDir, "$currentDir/$modulePath/assemble")
    if (assembleDir.exists() && firstArtifactId != null) {
        artifact("$firstArtifactId-android", new File(assembleDir, "$artifactName-android"))
        artifact("$firstArtifactId-desktop", new File(assembleDir, "$artifactName-desktop"))
        artifact("$firstArtifactId-ios", new File(assembleDir, "$artifactName-ios"))
        artifact("$firstArtifactId-js", new File(assembleDir, "$artifactName-js"))
        artifact("$firstArtifactId-examples-android", new File(assembleDir, "$artifactName-examples-android"))
        artifact("$firstArtifactId-examples-desktop", new File(assembleDir, "$artifactName-examples-desktop"))
        artifact("$firstArtifactId-examples-ios", new File(assembleDir, "$artifactName-examples-ios"))
        artifact("$firstArtifactId-examples-js", new File(assembleDir, "$artifactName-examples-js"))
    }
}

void artifact(String artifactId, File artifactDir) {
    File buildFile = new File(artifactDir, "build.gradle")
    if (!buildFile.exists()) return
    String projectPath = ":$artifactId"
    include(projectPath)
    project(projectPath).projectDir = artifactDir
}

settings.ext.artifactPattern = Pattern.compile(/^artifact "(.*)".*$/)
settings.ext.examplePattern = Pattern.compile(/^example\("(\w*)".*$/)
settings.ext.currentDir = "."
